var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DbgMacro\nDocTestSetup  = quote\n    using DbgMacro\nend","category":"page"},{"location":"#DbgMacro.jl","page":"Home","title":"DbgMacro.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DbgMacro.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides four macros: @dbg, @dumpct, @dumprt and @qn.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When executing","category":"page"},{"location":"","page":"Home","title":"Home","text":"@dbg ex1 ex2 ex3 ...","category":"page"},{"location":"","page":"Home","title":"Home","text":"the macro generates code that displays all the expressions in the same way as @show does, each on a separate line, preceded by the location in the format module:file:line. The output goes to stderr. Useful for debugging.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is inspired by Rust dbg! macro.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The macros @dumpct and @dumprt","category":"page"},{"location":"","page":"Home","title":"Home","text":"@dumpct expression\n@dumprt expression","category":"page"},{"location":"","page":"Home","title":"Home","text":"dump the provided expression at compile-time or run-time respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The macro @qn","category":"page"},{"location":"","page":"Home","title":"Home","text":"@qn expression","category":"page"},{"location":"","page":"Home","title":"Home","text":"returns the quoted expression without interpolating contained $.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using DbgMacro\n\nfunction fact(n::Integer)\n    @dbg n\n    n < 0 && error(\"`n` must be positive\")\n    n == 0 && return 1\n    n * fact(n-1)\nend\n\nfact(5)\n\nfunction ct(x)\n    @dumpct :x + x + $x\n    x\nend\n\nct(42)\n\nfunction rt(x)\n    @dumprt :x + x + $x\n    x\nend\n\nrt(42)\n\n@qn :x + x + $x","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DbgMacro]","category":"page"},{"location":"#DbgMacro.@dbg-Tuple","page":"Home","title":"DbgMacro.@dbg","text":"@dbg <expr1> <expr2> <expr3> ...\n\nDisplay all the expressions in the same way as @show does, each on a separate line, preceded by the location in the format module:file:line.\n\nThe output goes to stderr.\n\nUseful for debugging.\n\nExamples\n\njulia> m = [1 2; 3 4];\n\njulia> @dbg 1+2 \"Hello\" m\nMain:none:1  1 + 2 = 3\nMain:none:1  \"Hello\" = \"Hello\"\nMain:none:1  m = [1 2; 3 4]\n\n\n\n\n\n","category":"macro"},{"location":"#DbgMacro.@dumpct-Tuple{Any}","page":"Home","title":"DbgMacro.@dumpct","text":"@dumpct <expression>\n\nDump the expression at compile-time.\n\nExamples\n\njulia> function foo(x)\n           @dumpct :x + x + $x\n           x\n       end\nExpr\n  head: Symbol call\n  args: Array{Any}((4,))\n    1: Symbol +\n    2: QuoteNode\n      value: Symbol x\n    3: Symbol x\n    4: Expr\n      head: Symbol $\n      args: Array{Any}((1,))\n        1: Symbol x\nfoo (generic function with 1 method)\n\njulia> foo(42)\n42\n\n\n\n\n\n","category":"macro"},{"location":"#DbgMacro.@dumprt-Tuple{Any}","page":"Home","title":"DbgMacro.@dumprt","text":"@dumprt <expression>\n\nDump the expression at run-time.\n\nExamples\n\njulia> function foo(x)\n           @dumprt :x + x + $x\n           x\n       end\nfoo (generic function with 1 method)\n\njulia> foo(42)\nExpr\n  head: Symbol call\n  args: Array{Any}((4,))\n    1: Symbol +\n    2: QuoteNode\n      value: Symbol x\n    3: Symbol x\n    4: Expr\n      head: Symbol $\n      args: Array{Any}((1,))\n        1: Symbol x\n42\n\n\n\n\n\n","category":"macro"},{"location":"#DbgMacro.@qn-Tuple{Any}","page":"Home","title":"DbgMacro.@qn","text":"@qn <expression>\n\nReturn the expression, without $ interpolation.\n\nExamples\n\njulia> @qn foo(1, x, :y, $z)\n:(foo(1, x, :y, $(Expr(:$, :z))))\n\n\n\n\n\n","category":"macro"}]
}
